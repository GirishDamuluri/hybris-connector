/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.hybris;

import java.io.IOException;
import java.util.List;

import org.mule.api.annotations.Category;
import org.mule.api.annotations.ConnectionStrategy;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Paged;
import org.mule.api.annotations.Processor;
import org.mule.modules.hybris.model.CartDTO;
import org.mule.modules.hybris.model.CartEntriesDTO;
import org.mule.modules.hybris.model.CartEntryDTO;
import org.mule.modules.hybris.model.CartsDTO;
import org.mule.modules.hybris.model.CatalogDTO;
import org.mule.modules.hybris.model.CatalogVersionDTO;
import org.mule.modules.hybris.model.CatalogsDTO;
import org.mule.modules.hybris.model.CategoryDTO;
import org.mule.modules.hybris.model.CountriesDTO;
import org.mule.modules.hybris.model.CountryDTO;
import org.mule.modules.hybris.model.CurrenciesDTO;
import org.mule.modules.hybris.model.CurrencyDTO;
import org.mule.modules.hybris.model.DiscountDTO;
import org.mule.modules.hybris.model.DiscountsDTO;
import org.mule.modules.hybris.model.LanguageDTO;
import org.mule.modules.hybris.model.LanguagesDTO;
import org.mule.modules.hybris.model.PaymentModeDTO;
import org.mule.modules.hybris.model.PaymentModesDTO;
import org.mule.modules.hybris.model.ProductDTO;
import org.mule.modules.hybris.model.RegionDTO;
import org.mule.modules.hybris.model.RegionsDTO;
import org.mule.modules.hybris.model.UnitDTO;
import org.mule.modules.hybris.model.UnitsDTO;
import org.mule.modules.hybris.paging.HybrisPagingDelegate;
import org.mule.streaming.PagingConfiguration;
import org.mule.streaming.ProviderAwarePagingDelegate;

/**
 * Hybris Cloud Connector
 * 
 * @author ryandcarter.
 */
@Connector(name = "hybris", friendlyName = "hybris", schemaVersion = "1.0-SNAPSHOT")
public class HybrisConnector
{
    @ConnectionStrategy
    private HybrisBasicConnectionStrategy connection;

    /**
     * Get Catalogs
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-catalogs}
     * 
     * @param pagingConfiguration
     *            the paging configuration object
     * @return List of Catalogs
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-CatalogStructureandProducts">Catalog Structure and Products</a>
     */
    @Processor
    @Category(name = "Catalog Structure and Products", description = "A set of calls for the Catalog Structure and Products resources.")
    @Paged
    public ProviderAwarePagingDelegate<CatalogDTO, HybrisConnector> getCatalogs(
            final PagingConfiguration pagingConfiguration) throws IOException
    {
        return new HybrisPagingDelegate<CatalogDTO>() {
            @Override
            public List<CatalogDTO> doGetPage(HybrisConnector connector) throws IOException
            {
                CatalogsDTO catalogsDTO = connection.getClient().getCatalogs(
                        pagingConfiguration.getFetchSize(), this.start);
                return catalogsDTO.getCatalog();
            }
        };
    }

    /**
     * Get Catalog
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-catalog}
     * 
     * @param catalogId
     *            catalog id
     * @return Catalog
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-CatalogStructureandProducts">Catalog Structure and Products</a>
     */
    @Processor
    @Category(name = "Catalog Structure and Products", description = "A set of calls for the Catalog Structure and Products resources.")
    public CatalogDTO getCatalog(String catalogId) throws IOException
    {
        return connection.getClient().getCatalog(catalogId);
    }

    /**
     * Upsert Catalog
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:upsert-catalog}
     * 
     * @param catalog
     *            catalog
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-CatalogStructureandProducts">Catalog Structure and Products</a>
     */
    @Processor
    @Category(name = "Catalog Structure and Products", description = "A set of calls for the Catalog Structure and Products resources.")
    public void upsertCatalog(CatalogDTO catalog) throws IOException
    {
        connection.getClient().upsertCatalog(catalog);
    }

    /**
     * Delete Catalog
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:delete-catalog}
     * 
     * @param catalogId
     *            catalogId
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-CatalogStructureandProducts">Catalog Structure and Products</a>
     */
    @Processor
    @Category(name = "Catalog Structure and Products", description = "A set of calls for the Catalog Structure and Products resources.")
    public void deleteCatalog(String catalogId) throws IOException
    {
        connection.getClient().deleteCatalog(catalogId);
    }

    /**
     * Get Catalog Version
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-catalog-version}
     * 
     * @param catalogId
     *            catalog id
     * @param version
     *            version
     * @return CatalogVersionDTO
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-CatalogStructureandProducts">Catalog Structure and Products</a>
     */
    @Processor
    @Category(name = "Catalog Structure and Products", description = "A set of calls for the Catalog Structure and Products resources.")
    public CatalogVersionDTO getCatalogVersion(String catalogId, String version) throws IOException
    {
        return connection.getClient().getCatalogVersion(catalogId, version);
    }

    /**
     * Upsert Catalog Version
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:upsert-catalog-version}
     * 
     * @param catalogVersion
     *            CatalogVersionDTO
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-CatalogStructureandProducts">Catalog Structure and Products</a>
     */
    @Processor
    @Category(name = "Catalog Structure and Products", description = "A set of calls for the Catalog Structure and Products resources.")
    public void upsertCatalogVersion(CatalogVersionDTO catalogVersion) throws IOException
    {
        connection.getClient().upsertCatalogVersion(catalogVersion);
    }

    /**
     * Delete Catalog Version
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:delete-catalog-version}
     * 
     * @param catalogId
     *            catalogId
     * @param version
     *            version
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-CatalogStructureandProducts">Catalog Structure and Products</a>
     */
    @Processor
    @Category(name = "Catalog Structure and Products", description = "A set of calls for the Catalog Structure and Products resources.")
    public void deleteCatalogVersion(String catalogId, String version) throws IOException
    {
        connection.getClient().deleteCatalogVersion(catalogId, version);
    }

    /**
     * Get Category
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-category}
     * 
     * @param catalogId
     *            catalog id
     * @param version
     *            version
     * @param categoryCode
     *            category code
     * @return CategoryDTO
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-CatalogStructureandProducts">Catalog Structure and Products</a>
     */
    @Processor
    @Category(name = "Catalog Structure and Products", description = "A set of calls for the Catalog Structure and Products resources.")
    public CategoryDTO getCategory(String catalogId, String version, String categoryCode)
            throws IOException
    {
        return connection.getClient().getCategory(catalogId, version, categoryCode);
    }

    /**
     * Upsert Category
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:upsert-category}
     * 
     * @param category
     *            CategoryDTO
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-CatalogStructureandProducts">Catalog Structure and Products</a>
     */
    @Processor
    @Category(name = "Catalog Structure and Products", description = "A set of calls for the Catalog Structure and Products resources.")
    public void upsertCategory(CategoryDTO category) throws IOException
    {
        connection.getClient().upsertCategory(category);
    }

    /**
     * Delete Category
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:delete-category}
     * 
     * @param catalogId
     *            catalogId
     * @param version
     *            version
     * @param categoryCode
     *            category code
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-CatalogStructureandProducts">Catalog Structure and Products</a>
     */
    @Processor
    @Category(name = "Catalog Structure and Products", description = "A set of calls for the Catalog Structure and Products resources.")
    public void deleteCategory(String catalogId, String version, String categoryCode)
            throws IOException
    {
        connection.getClient().deleteCategory(catalogId, version, categoryCode);
    }

    /**
     * Get Product
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-product}
     * 
     * @param catalogId
     *            catalog id
     * @param version
     *            version
     * @param productCode
     *            product code
     * @return ProductDTO
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-CatalogStructureandProducts">Catalog Structure and Products</a>
     */
    @Processor
    @Category(name = "Catalog Structure and Products", description = "A set of calls for the Catalog Structure and Products resources.")
    public ProductDTO getProduct(String catalogId, String version, String productCode)
            throws IOException
    {
        return connection.getClient().getProduct(catalogId, version, productCode);
    }

    /**
     * Upsert Product
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:upsert-product}
     * 
     * @param product
     *            ProductDTO
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-CatalogStructureandProducts">Catalog Structure and Products</a>
     */
    @Processor
    @Category(name = "Catalog Structure and Products", description = "A set of calls for the Catalog Structure and Products resources.")
    public void upsertProduct(ProductDTO product) throws IOException
    {
        connection.getClient().upsertProduct(product);
    }

    /**
     * Delete Product
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:delete-product}
     * 
     * @param catalogId
     *            catalogId
     * @param version
     *            version
     * @param productCode
     *            product code
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-CatalogStructureandProducts">Catalog Structure and Products</a>
     */
    @Processor
    @Category(name = "Catalog Structure and Products", description = "A set of calls for the Catalog Structure and Products resources.")
    public void deleteProduct(String catalogId, String version, String productCode)
            throws IOException
    {
        connection.getClient().deleteProduct(catalogId, version, productCode);
    }

    /**
     * Get Units
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-units}
     * 
     * @param pagingConfiguration
     *            the paging configuration object
     * @return List of Units
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-CatalogStructureandProducts">Catalog Structure and Products</a>
     */
    @Processor
    @Category(name = "Catalog Structure and Products", description = "A set of calls for the Catalog Structure and Products resources.")
    @Paged
    public ProviderAwarePagingDelegate<UnitDTO, HybrisConnector> getUnits(
            final PagingConfiguration pagingConfiguration) throws IOException
    {
        return new HybrisPagingDelegate<UnitDTO>() {
            @Override
            public List<UnitDTO> doGetPage(HybrisConnector connector) throws IOException
            {

                UnitsDTO unitsDTO = connection.getClient().getUnits(
                        pagingConfiguration.getFetchSize(), this.start);
                return unitsDTO.getUnit();
            }
        };
    }

    /**
     * Get Unit
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-unit}
     * 
     * @param unitCode
     *            unit id
     * @return Unit
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-CatalogStructureandProducts">Catalog Structure and Products</a>
     */
    @Processor
    @Category(name = "Catalog Structure and Products", description = "A set of calls for the Catalog Structure and Products resources.")
    public UnitDTO getUnit(String unitCode) throws IOException
    {
        return connection.getClient().getUnit(unitCode);
    }

    /**
     * Upsert Unit
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:upsert-unit}
     * 
     * @param unit
     *            unit
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-CatalogStructureandProducts">Catalog Structure and Products</a>
     */
    @Processor
    @Category(name = "Catalog Structure and Products", description = "A set of calls for the Catalog Structure and Products resources.")
    public void upsertUnit(UnitDTO unit) throws IOException
    {
        connection.getClient().upsertUnit(unit);
    }

    /**
     * Delete Unit
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:delete-unit}
     * 
     * @param unitCode
     *            unitCode
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-CatalogStructureandProducts">Catalog Structure and Products</a>
     */
    @Processor
    @Category(name = "Catalog Structure and Products", description = "A set of calls for the Catalog Structure and Products resources.")
    public void deleteUnit(String unitCode) throws IOException
    {
        connection.getClient().deleteUnit(unitCode);
    }

    /**
     * Get Currencies
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-currencies}
     * 
     * @param pagingConfiguration
     *            the paging configuration object
     * @return List of Currencies
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    @Paged
    public ProviderAwarePagingDelegate<CurrencyDTO, HybrisConnector> getCurrencies(
            final PagingConfiguration pagingConfiguration) throws IOException
    {
        return new HybrisPagingDelegate<CurrencyDTO>() {
            @Override
            public List<CurrencyDTO> doGetPage(HybrisConnector connector) throws IOException
            {
                CurrenciesDTO currenciesDto = connection.getClient().getCurrencies(
                        pagingConfiguration.getFetchSize(), start);
                return currenciesDto.getCurrency();
            }
        };
    }

    /**
     * Get Currency
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-currency}
     * 
     * @param isocode
     *            isocode
     * @return Currency
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    public CurrencyDTO getCurrency(String isocode) throws IOException
    {
        return connection.getClient().getCurrency(isocode);
    }

    /**
     * Upsert Currency
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:upsert-currency}
     * 
     * @param isocode
     *            isocode
     * @param currency
     *            CurrencyDTO
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    public void upsertCurrency(CurrencyDTO currency) throws IOException
    {
        connection.getClient().upsertCurrency(currency);
    }

    /**
     * Delete Currency
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:delete-currency}
     * 
     * @param isocode
     *            isocode
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    public void deleteCurrency(String isocode) throws IOException
    {
        connection.getClient().deleteCurrency(isocode);
    }

    /**
     * Get Discounts
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-discounts}
     * 
     * @param pagingConfiguration
     *            the paging configuration object
     * @return List of Discounts
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    @Paged
    public ProviderAwarePagingDelegate<DiscountDTO, HybrisConnector> getDiscounts(
            final PagingConfiguration pagingConfiguration) throws IOException
    {
        return new HybrisPagingDelegate<DiscountDTO>() {
            @Override
            public List<DiscountDTO> doGetPage(HybrisConnector connector) throws IOException
            {
                DiscountsDTO discountsDto = connection.getClient().getDiscounts(
                        pagingConfiguration.getFetchSize(), this.start);
                return discountsDto.getDiscount();
            }
        };
    }

    /**
     * Get Discount
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-discount}
     * 
     * @param code
     *            code
     * @return Discount
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    public DiscountDTO getDiscount(String code) throws IOException
    {
        return connection.getClient().getDiscount(code);
    }

    /**
     * Upsert Discount
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:upsert-discount}
     * 
     * @param code
     *            code
     * @param discount
     *            DiscountDTO
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    public void upsertDiscount(DiscountDTO discount) throws IOException
    {
        connection.getClient().upsertDiscount(discount);
    }

    /**
     * Delete Discount
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:delete-discount}
     * 
     * @param code
     *            code
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    public void deleteDiscount(String code) throws IOException
    {
        connection.getClient().deleteDiscount(code);
    }

    /**
     * Get Carts
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-carts}
     * 
     * @param pagingConfiguration
     *            the paging configuration object
     * @return List of Carts
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    @Paged
    public ProviderAwarePagingDelegate<CartDTO, HybrisConnector> getCarts(
            final PagingConfiguration pagingConfiguration) throws IOException
    {
        return new HybrisPagingDelegate<CartDTO>() {
            @Override
            public List<CartDTO> doGetPage(HybrisConnector connector) throws IOException
            {
                CartsDTO cartsDto = connection.getClient().getCarts(
                        pagingConfiguration.getFetchSize(), this.start);
                return cartsDto.getCart();
            }
        };
    }

    /**
     * Get Cart
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-cart}
     * 
     * @param code
     *            code
     * @return Cart
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    public CartDTO getCart(String code) throws IOException
    {
        return connection.getClient().getCart(code);
    }

    /**
     * Upsert Cart
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:upsert-cart}
     * 
     * @param code
     *            code
     * @param cart
     *            CartDTO
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    public void upsertCart(CartDTO cart) throws IOException
    {
        connection.getClient().upsertCart(cart);
    }

    /**
     * Delete Cart
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:delete-cart}
     * 
     * @param code
     *            code
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    public void deleteCart(String code) throws IOException
    {
        connection.getClient().deleteCart(code);
    }

    /**
     * Get CartEntries
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-cart-entries}
     * 
     * @param pagingConfiguration
     *            the paging configuration object
     * @return List of CartEntries
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    @Paged
    public ProviderAwarePagingDelegate<CartEntryDTO, HybrisConnector> getCartEntries(
            final PagingConfiguration pagingConfiguration) throws IOException
    {
        return new HybrisPagingDelegate<CartEntryDTO>() {
            @Override
            public List<CartEntryDTO> doGetPage(HybrisConnector connector) throws IOException
            {
                CartEntriesDTO cartEntriesDto = connection.getClient().getCartEntries(
                        pagingConfiguration.getFetchSize(), this.start);
                return cartEntriesDto.getCartentry();
            }
        };
    }

    /**
     * Get CartEntry
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-cart-entry}
     * 
     * @param pk
     *            pk
     * @return CartEntry
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    public CartEntryDTO getCartEntry(Long pk) throws IOException
    {
        return connection.getClient().getCartEntry(pk);
    }

    /**
     * Upsert CartEntry
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:upsert-cart-entry}
     * 
     * @param pk
     *            pk
     * @param cartEntry
     *            CartEntryDTO
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    public void upsertCartEntry(CartEntryDTO cartEntry) throws IOException
    {
        connection.getClient().upsertCartEntry(cartEntry);
    }

    /**
     * Delete CartEntry
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:delete-cart-entry}
     * 
     * @param pk
     *            pk
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    public void deleteCartEntry(Long pk) throws IOException
    {
        connection.getClient().deleteCartEntry(pk);
    }

    /**
     * Get Countries
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-countries}
     * 
     * @param pagingConfiguration
     *            the paging configuration object
     * @return List of Countries
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-Country%2CRegion%2CLocale">Country, Region and Locale</a>
     */
    @Processor
    @Category(name = "Country, Region and Locale", description = "A set of calls for the Country, Region and Locale resources.")
    @Paged
    public ProviderAwarePagingDelegate<CountryDTO, HybrisConnector> getCountries(
            final PagingConfiguration pagingConfiguration) throws IOException
    {
        return new HybrisPagingDelegate<CountryDTO>() {
            @Override
            public List<CountryDTO> doGetPage(HybrisConnector connector) throws IOException
            {
                CountriesDTO countriesDto = connection.getClient().getCountries(
                        pagingConfiguration.getFetchSize(), this.start);
                return countriesDto.getCountry();
            }
        };
    }

    /**
     * Get PaymentModes
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-payment-modes}
     * 
     * @param pagingConfiguration
     *            the paging configuration object
     * @return List of PaymentModes
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    @Paged
    public ProviderAwarePagingDelegate<PaymentModeDTO, HybrisConnector> getPaymentModes(
            final PagingConfiguration pagingConfiguration) throws IOException
    {
        return new HybrisPagingDelegate<PaymentModeDTO>() {
            @Override
            public List<PaymentModeDTO> doGetPage(HybrisConnector connector) throws IOException
            {
                PaymentModesDTO paymentModesDto = connection.getClient().getPaymentModes(
                        pagingConfiguration.getFetchSize(), this.start);
                return paymentModesDto.getPaymentmode();
            }
        };
    }

    /**
     * Get PaymentMode
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-payment-mode}
     * 
     * @param code
     *            code
     * @return PaymentModeDTO
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    public PaymentModeDTO getPaymentMode(String code) throws IOException
    {
        return connection.getClient().getPaymentMode(code);
    }

    /**
     * Upsert PaymentMode
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:upsert-payment-mode}
     * 
     * @param code
     *            code
     * @param paymentMode
     *            PaymentModeDTO
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    public void upsertPaymentMode(PaymentModeDTO paymentMode) throws IOException
    {
        connection.getClient().upsertPaymentMode(paymentMode);
    }

    /**
     * Delete PaymentMode
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:delete-payment-mode}
     * 
     * @param code
     *            code
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-OrderingProcess">Ordering Process</a>
     */
    @Processor
    @Category(name = "Ordering Process", description = "A set of calls for the Ordering Process resources.")
    public void deletePaymentMode(String code) throws IOException
    {
        connection.getClient().deletePaymentMode(code);
    }

    /**
     * Get Country
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-country}
     * 
     * @param isocode
     *            isocode
     * @return CountryDTO
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-Country%2CRegion%2CLocale">Country, Region and Locale</a>
     */
    @Processor
    @Category(name = "Country, Region and Locale", description = "A set of calls for the Country, Region and Locale resources.")
    public CountryDTO getCountry(String isocode) throws IOException
    {
        return connection.getClient().getCountry(isocode);
    }

    /**
     * Upsert Country
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:upsert-country}
     * 
     * @param isocode
     *            isocode
     * @param country
     *            CountryDTO
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-Country%2CRegion%2CLocale">Country, Region and Locale</a>
     */
    @Processor
    @Category(name = "Country, Region and Locale", description = "A set of calls for the Country, Region and Locale resources.")
    public void upsertCountry(CountryDTO country) throws IOException
    {
        connection.getClient().upsertCountry(country);
    }

    /**
     * Delete Country
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:delete-country}
     * 
     * @param isocode
     *            isocode
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-Country%2CRegion%2CLocale">Country, Region and Locale</a>
     */
    @Processor
    @Category(name = "Country, Region and Locale", description = "A set of calls for the Country, Region and Locale resources.")
    public void deleteCountry(String isocode) throws IOException
    {
        connection.getClient().deleteCountry(isocode);
    }

    /**
     * Get Regions
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-regions}
     * 
     * @param pagingConfiguration
     *            the paging configuration object
     * @return List of Regions
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-Country%2CRegion%2CLocale">Country, Region and Locale</a>
     */
    @Processor
    @Category(name = "Country, Region and Locale", description = "A set of calls for the Country, Region and Locale resources.")
    @Paged
    public ProviderAwarePagingDelegate<RegionDTO, HybrisConnector> getRegions(
            final PagingConfiguration pagingConfiguration) throws IOException
    {
        return new HybrisPagingDelegate<RegionDTO>() {
            @Override
            public List<RegionDTO> doGetPage(HybrisConnector connector) throws IOException
            {
                RegionsDTO regionsDto = connection.getClient().getRegions(
                        pagingConfiguration.getFetchSize(), this.start);
                return regionsDto.getRegion();
            }
        };
    }

    /**
     * Get Region
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-region}
     * 
     * @param isocode
     *            isocode
     * @return Country
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-Country%2CRegion%2CLocale">Country, Region and Locale</a>
     */
    @Processor
    @Category(name = "Country, Region and Locale", description = "A set of calls for the Country, Region and Locale resources.")
    public RegionDTO getRegion(String isocode) throws IOException
    {
        return connection.getClient().getRegion(isocode);
    }

    /**
     * Upsert Region
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:upsert-region}
     * 
     * @param isocode
     *            isocode
     * @param region
     *            RegionDTO
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-Country%2CRegion%2CLocale">Country, Region and Locale</a>
     */
    @Processor
    @Category(name = "Country, Region and Locale", description = "A set of calls for the Country, Region and Locale resources.")
    public void upsertRegion(RegionDTO region) throws IOException
    {
        connection.getClient().upsertRegion(region);
    }

    /**
     * Delete Region
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:delete-region}
     * 
     * @param isocode
     *            isocode
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-Country%2CRegion%2CLocale">Country, Region and Locale</a>
     */
    @Processor
    @Category(name = "Country, Region and Locale", description = "A set of calls for the Country, Region and Locale resources.")
    public void deleteRegion(String isocode) throws IOException
    {
        connection.getClient().deleteRegion(isocode);
    }

    /**
     * Get Languages
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-languages}
     * 
     * @param pagingConfiguration
     *            the paging configuration object
     * @return List of Countries
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-Country%2CRegion%2CLocale">Country, Region and Locale</a>
     */
    @Processor
    @Category(name = "Country, Region and Locale", description = "A set of calls for the Country, Region and Locale resources.")
    @Paged
    public ProviderAwarePagingDelegate<LanguageDTO, HybrisConnector> getLanguages(
            final PagingConfiguration pagingConfiguration) throws IOException
    {
        return new HybrisPagingDelegate<LanguageDTO>() {
            @Override
            public List<LanguageDTO> doGetPage(HybrisConnector connector) throws IOException
            {
                LanguagesDTO languagesDto = connection.getClient().getLanguages(
                        pagingConfiguration.getFetchSize(), this.start);
                return languagesDto.getLanguage();
            }
        };
    }

    /**
     * Get Language
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:get-language}
     * 
     * @param isocode
     *            isocode
     * @return Country
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-Country%2CRegion%2CLocale">Country, Region and Locale</a>
     */
    @Processor
    @Category(name = "Country, Region and Locale", description = "A set of calls for the Country, Region and Locale resources.")
    public LanguageDTO getLanguage(String isocode) throws IOException
    {
        return connection.getClient().getLanguage(isocode);
    }

    /**
     * Upsert Language
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:upsert-language}
     * 
     * @param isocode
     *            isocode
     * @param language
     *            LanguageDTO
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-Country%2CRegion%2CLocale">Country, Region and Locale</a>
     */
    @Processor
    @Category(name = "Country, Region and Locale", description = "A set of calls for the Country, Region and Locale resources.")
    public void upsertLanguage(LanguageDTO language) throws IOException
    {
        connection.getClient().upsertLanguage(language);
    }

    /**
     * Delete Language
     * 
     * {@sample.xml ../../../doc/hybris-connector.xml.sample hybris:delete-language}
     * 
     * @param isocode
     *            isocode
     * @throws IOException
     *             communication exception
     * @api.doc <a href="https://wiki.hybris.com/display/release5/WebService+API+-+Reference#WebServiceAPI-Reference-Country%2CRegion%2CLocale">Country, Region and Locale</a>
     */
    @Processor
    @Category(name = "Country, Region and Locale", description = "A set of calls for the Country, Region and Locale resources.")
    public void deleteLanguage(String isocode) throws IOException
    {
        connection.getClient().deleteLanguage(isocode);
    }

    public HybrisBasicConnectionStrategy getConnection()
    {
        return connection;
    }

    public void setConnection(HybrisBasicConnectionStrategy connection)
    {
        this.connection = connection;
    }
}
