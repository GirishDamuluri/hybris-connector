/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.hybris;

import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;
import static com.github.tomakehurst.wiremock.client.WireMock.delete;
import static com.github.tomakehurst.wiremock.client.WireMock.deleteRequestedFor;
import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;
import static com.github.tomakehurst.wiremock.client.WireMock.get;
import static com.github.tomakehurst.wiremock.client.WireMock.getRequestedFor;
import static com.github.tomakehurst.wiremock.client.WireMock.put;
import static com.github.tomakehurst.wiremock.client.WireMock.putRequestedFor;
import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;
import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;
import static com.github.tomakehurst.wiremock.client.WireMock.verify;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.instanceOf;
import static org.hamcrest.Matchers.greaterThan;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.not;
import static org.hamcrest.Matchers.nullValue;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.List;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.mule.api.MuleEvent;
import org.mule.util.Base64;
import org.mule.construct.Flow;
import org.mule.modules.hybris.model.CartDTO;
import org.mule.modules.hybris.model.CartEntryDTO;
import org.mule.modules.hybris.model.CatalogDTO;
import org.mule.modules.hybris.model.CatalogVersionDTO;
import org.mule.modules.hybris.model.CategoryDTO;
import org.mule.modules.hybris.model.CountryDTO;
import org.mule.modules.hybris.model.CurrencyDTO;
import org.mule.modules.hybris.model.DiscountDTO;
import org.mule.modules.hybris.model.LanguageDTO;
import org.mule.modules.hybris.model.PaymentModeDTO;
import org.mule.modules.hybris.model.ProductDTO;
import org.mule.modules.hybris.model.RegionDTO;
import org.mule.modules.hybris.model.UnitDTO;
import org.mule.tck.junit4.FunctionalTestCase;
import org.mule.tck.junit4.rule.DynamicPort;
import org.mule.util.IOUtils;

import com.github.tomakehurst.wiremock.junit.WireMockClassRule;

public class HybrisConnectorTest extends FunctionalTestCase
{

    @Rule
    public DynamicPort port = new DynamicPort("hybris.port");
    @Rule
    public WireMockClassRule wireMockRule = new WireMockClassRule(port.getNumber());

    @Before
    public void setupStubs()
    {
        stubFor(get(urlEqualTo("/ws410/rest/login")).willReturn(
                aResponse().withStatus(200).withHeader("Set-Cookie", "SESSION:XXX;Path=/")));
    }

    @Override
    protected String getConfigResources()
    {
        return "mule-config.xml";
    }

    @Test
    public void testGetCatalogs() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/catalogs?catalogs_size=4&catalogs_page=0"))
                .willReturn(
                        aResponse()
                                .withStatus(200)
                                .withHeader("Content-type", "application/xml")
                                .withBody(
                                        IOUtils.getResourceAsString("xml/catalogs.xml",
                                                this.getClass()))));

        Flow flow = lookupFlowConstruct("getCatalogsPaged");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(urlEqualTo("/ws410/rest/catalogs?catalogs_size=4&catalogs_page=0"))
                .withHeader("Authorization", equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(List.class)));

        @SuppressWarnings("unchecked")
        List<CatalogDTO> catalogs = (List<CatalogDTO>) responseEvent.getMessage().getPayload();
        assertThat(catalogs, is(not(empty())));
    }

    @Test
    public void testGetCatalog() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog")).willReturn(
                aResponse().withStatus(200).withHeader("Content-type", "application/xml")
                        .withBody(IOUtils.getResourceAsString("xml/catalog.xml", this.getClass()))));

        Flow flow = lookupFlowConstruct("getCatalog");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog"))
                .withHeader("Authorization", equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(CatalogDTO.class)));

        CatalogDTO catalog = (CatalogDTO) responseEvent.getMessage().getPayload();
        assertThat(catalog.getId(), is("electronicsProductCatalog"));
    }

    @Test
    public void testUpsertCatalog() throws Exception
    {
        stubFor(put(urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog")).willReturn(
                aResponse().withStatus(201)));

        Flow flow = lookupFlowConstruct("upsertCatalog");

        CatalogDTO catalogRequest = new CatalogDTO();
        catalogRequest.setId("electronicsProductCatalog");

        MuleEvent event = FunctionalTestCase.getTestEvent(catalogRequest);
        flow.process(event);

        verify(putRequestedFor(urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog"))
                .withHeader("Content-type", equalTo("application/xml")).withHeader("Authorization",
                        equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testDeleteCatalog() throws Exception
    {
        stubFor(delete(urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog")).willReturn(
                aResponse().withStatus(200)));

        Flow flow = lookupFlowConstruct("deleteCatalog");

        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        flow.process(event);

        verify(deleteRequestedFor(urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog"))
                .withHeader("Authorization", equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testGetCatalogVersion() throws Exception
    {
        stubFor(get(
                urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog/catalogversions/Online"))
                .willReturn(
                        aResponse()
                                .withStatus(200)
                                .withHeader("Content-type", "application/xml")
                                .withBody(
                                        IOUtils.getResourceAsString("xml/catalogversion.xml",
                                                this.getClass()))));

        Flow flow = lookupFlowConstruct("getCatalogVersion");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(
                urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog/catalogversions/Online"))
                .withHeader("Authorization", equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(CatalogVersionDTO.class)));

        CatalogVersionDTO catalogVersion = (CatalogVersionDTO) responseEvent.getMessage()
                .getPayload();

        assertThat(catalogVersion.getVersion(), is("Online"));
    }

    @Test
    public void testUpsertCatalogVersion() throws Exception
    {
        stubFor(put(
                urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog/catalogversions/Online"))
                .willReturn(aResponse().withStatus(201)));

        Flow flow = lookupFlowConstruct("upsertCatalogVersion");

        CatalogDTO catalog = new CatalogDTO();
        catalog.setId("electronicsProductCatalog");

        CatalogVersionDTO catalogVersionRequest = new CatalogVersionDTO();
        catalogVersionRequest.setCatalog(catalog);
        catalogVersionRequest.setVersion("Online");

        MuleEvent event = FunctionalTestCase.getTestEvent(catalogVersionRequest);
        flow.process(event);

        verify(putRequestedFor(
                urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog/catalogversions/Online"))
                .withHeader("Content-type", equalTo("application/xml")).withHeader("Authorization",
                        equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testDeleteCatalogVersion() throws Exception
    {
        stubFor(delete(
                urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog/catalogversions/Online"))
                .willReturn(aResponse().withStatus(200)));

        Flow flow = lookupFlowConstruct("deleteCatalogVersion");

        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        flow.process(event);

        verify(deleteRequestedFor(
                urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog/catalogversions/Online"))
                .withHeader("Authorization", equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testGetCategory() throws Exception
    {
        stubFor(get(
                urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog/catalogversions/Online/categories/1"))
                .willReturn(
                        aResponse()
                                .withStatus(200)
                                .withHeader("Content-type", "application/xml")
                                .withBody(
                                        IOUtils.getResourceAsString("xml/category.xml",
                                                this.getClass()))));

        Flow flow = lookupFlowConstruct("getCategory");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(
                urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog/catalogversions/Online/categories/1"))
                .withHeader("Authorization", equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(CategoryDTO.class)));

        CategoryDTO category = (CategoryDTO) responseEvent.getMessage().getPayload();

        assertThat(category.getCode(), is("1"));
    }

    @Test
    public void testUpsertCategory() throws Exception
    {
        stubFor(put(
                urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog/catalogversions/Online/categories/1"))
                .willReturn(aResponse().withStatus(201)));

        Flow flow = lookupFlowConstruct("upsertCategory");

        CatalogDTO catalog = new CatalogDTO();
        catalog.setId("electronicsProductCatalog");

        CatalogVersionDTO catalogVersion = new CatalogVersionDTO();
        catalogVersion.setCatalog(catalog);
        catalogVersion.setVersion("Online");

        CategoryDTO category = new CategoryDTO();
        category.setCode("1");
        category.setCatalogVersion(catalogVersion);

        MuleEvent event = FunctionalTestCase.getTestEvent(category);
        flow.process(event);

        verify(putRequestedFor(
                urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog/catalogversions/Online/categories/1"))
                .withHeader("Content-type", equalTo("application/xml")).withHeader("Authorization",
                        equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testDeleteCategory() throws Exception
    {
        stubFor(delete(
                urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog/catalogversions/Online/categories/1"))
                .willReturn(aResponse().withStatus(200)));

        Flow flow = lookupFlowConstruct("deleteCategory");

        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        flow.process(event);

        verify(deleteRequestedFor(
                urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog/catalogversions/Online/categories/1"))
                .withHeader("Authorization", equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testGetProduct() throws Exception
    {
        stubFor(get(
                urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog/catalogversions/Online/products/1"))
                .willReturn(
                        aResponse()
                                .withStatus(200)
                                .withHeader("Content-type", "application/xml")
                                .withBody(
                                        IOUtils.getResourceAsString("xml/product.xml",
                                                this.getClass()))));

        Flow flow = lookupFlowConstruct("getProduct");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(
                urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog/catalogversions/Online/products/1"))
                .withHeader("Authorization", equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(ProductDTO.class)));

        ProductDTO product = (ProductDTO) responseEvent.getMessage().getPayload();

        assertThat(product.getCode(), is("1"));
    }

    @Test
    public void testUpsertProduct() throws Exception
    {
        stubFor(put(
                urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog/catalogversions/Online/products/1"))
                .willReturn(aResponse().withStatus(201)));

        Flow flow = lookupFlowConstruct("upsertProduct");

        CatalogDTO catalog = new CatalogDTO();
        catalog.setId("electronicsProductCatalog");

        CatalogVersionDTO catalogVersion = new CatalogVersionDTO();
        catalogVersion.setCatalog(catalog);
        catalogVersion.setVersion("Online");

        ProductDTO product = new ProductDTO();
        product.setCode("1");
        product.setCatalogVersion(catalogVersion);

        MuleEvent event = FunctionalTestCase.getTestEvent(product);
        flow.process(event);

        verify(putRequestedFor(
                urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog/catalogversions/Online/products/1"))
                .withHeader("Content-type", equalTo("application/xml")).withHeader("Authorization",
                        equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testDeleteProduct() throws Exception
    {
        stubFor(delete(
                urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog/catalogversions/Online/products/1"))
                .willReturn(aResponse().withStatus(200)));

        Flow flow = lookupFlowConstruct("deleteProduct");

        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        flow.process(event);

        verify(deleteRequestedFor(
                urlEqualTo("/ws410/rest/catalogs/electronicsProductCatalog/catalogversions/Online/products/1"))
                .withHeader("Authorization", equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testGetUnits() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/units?units_size=4&units_page=0")).willReturn(
                aResponse().withStatus(200).withHeader("Content-type", "application/xml")
                        .withBody(IOUtils.getResourceAsString("xml/units.xml", this.getClass()))));

        Flow flow = lookupFlowConstruct("getUnitsPaged");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(urlEqualTo("/ws410/rest/units?units_size=4&units_page=0"))
                .withHeader("Authorization", equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(List.class)));

        @SuppressWarnings("unchecked")
        List<UnitDTO> units = (List<UnitDTO>) responseEvent.getMessage().getPayload();
        assertThat(units, is(not(empty())));
    }

    @Test
    public void testGetUnit() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/units/pieces")).willReturn(
                aResponse().withStatus(200).withHeader("Content-type", "application/xml")
                        .withBody(IOUtils.getResourceAsString("xml/unit.xml", this.getClass()))));

        Flow flow = lookupFlowConstruct("getUnit");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(urlEqualTo("/ws410/rest/units/pieces")).withHeader("Authorization",
                equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(UnitDTO.class)));

        UnitDTO unit = (UnitDTO) responseEvent.getMessage().getPayload();
        assertThat(unit.getCode(), is("pieces"));
    }

    @Test
    public void testUpsertUnit() throws Exception
    {
        stubFor(put(urlEqualTo("/ws410/rest/units/pieces")).willReturn(aResponse().withStatus(201)));

        Flow flow = lookupFlowConstruct("upsertUnit");

        UnitDTO unitRequest = new UnitDTO();
        unitRequest.setCode("pieces");

        MuleEvent event = FunctionalTestCase.getTestEvent(unitRequest);
        flow.process(event);

        verify(putRequestedFor(urlEqualTo("/ws410/rest/units/pieces")).withHeader("Content-type",
                equalTo("application/xml")).withHeader("Authorization",
                equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testDeleteUnit() throws Exception
    {
        stubFor(delete(urlEqualTo("/ws410/rest/units/pieces")).willReturn(
                aResponse().withStatus(200)));

        Flow flow = lookupFlowConstruct("deleteUnit");

        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        flow.process(event);

        verify(deleteRequestedFor(urlEqualTo("/ws410/rest/units/pieces")).withHeader(
                "Authorization", equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testGetCurrencies() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/currencies?currencies_size=3&currencies_page=0"))
                .willReturn(
                        aResponse()
                                .withStatus(200)
                                .withHeader("Content-type", "application/xml")
                                .withBody(
                                        IOUtils.getResourceAsString("xml/currencies.xml",
                                                this.getClass()))));

        Flow flow = lookupFlowConstruct("getCurrenciesPaged");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(
                urlEqualTo("/ws410/rest/currencies?currencies_size=3&currencies_page=0"))
                .withHeader("Authorization", equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(List.class)));

        @SuppressWarnings("unchecked")
        List<CurrencyDTO> currencies = (List<CurrencyDTO>) responseEvent.getMessage().getPayload();
        assertThat(currencies.size(), is(greaterThan(0)));
    }

    @Test
    public void testGetCurrency() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/currencies/EUR"))
                .willReturn(
                        aResponse()
                                .withStatus(200)
                                .withHeader("Content-type", "application/xml")
                                .withBody(
                                        IOUtils.getResourceAsString("xml/currency.xml",
                                                this.getClass()))));

        Flow flow = lookupFlowConstruct("getCurrency");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(urlEqualTo("/ws410/rest/currencies/EUR")).withHeader(
                "Authorization", equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(CurrencyDTO.class)));

        CurrencyDTO currency = (CurrencyDTO) responseEvent.getMessage().getPayload();

        assertThat(currency.getIsocode(), is("EUR"));
    }

    @Test
    public void testUpsertCurrency() throws Exception
    {
        stubFor(put(urlEqualTo("/ws410/rest/currencies/EUR")).willReturn(
                aResponse().withStatus(201)));

        Flow flow = lookupFlowConstruct("upsertCurrency");

        CurrencyDTO currencyRequest = new CurrencyDTO();
        currencyRequest.setIsocode("EUR");

        MuleEvent event = FunctionalTestCase.getTestEvent(currencyRequest);
        flow.process(event);

        verify(putRequestedFor(urlEqualTo("/ws410/rest/currencies/EUR")).withHeader("Content-type",
                equalTo("application/xml")).withHeader("Authorization",
                equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testDeleteCurrency() throws Exception
    {
        stubFor(delete(urlEqualTo("/ws410/rest/currencies/EUR")).willReturn(
                aResponse().withStatus(200)));

        Flow flow = lookupFlowConstruct("deleteCurrency");

        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        flow.process(event);

        verify(deleteRequestedFor(urlEqualTo("/ws410/rest/currencies/EUR")).withHeader(
                "Authorization", equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testGetDiscounts() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/discounts?discounts_size=3&discounts_page=0"))
                .willReturn(
                        aResponse()
                                .withStatus(200)
                                .withHeader("Content-type", "application/xml")
                                .withBody(
                                        IOUtils.getResourceAsString("xml/discounts.xml",
                                                this.getClass()))));

        Flow flow = lookupFlowConstruct("getDiscountsPaged");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(
                urlEqualTo("/ws410/rest/discounts?discounts_size=3&discounts_page=0")).withHeader(
                "Authorization", equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(List.class)));

        @SuppressWarnings("unchecked")
        List<DiscountDTO> discounts = (List<DiscountDTO>) responseEvent.getMessage().getPayload();
        assertThat(discounts.size(), is(greaterThan(0)));
    }

    @Test
    public void testGetDiscount() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/discounts/d1"))
                .willReturn(
                        aResponse()
                                .withStatus(200)
                                .withHeader("Content-type", "application/xml")
                                .withBody(
                                        IOUtils.getResourceAsString("xml/discount.xml",
                                                this.getClass()))));

        Flow flow = lookupFlowConstruct("getDiscount");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(urlEqualTo("/ws410/rest/discounts/d1")).withHeader("Authorization",
                equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(DiscountDTO.class)));

        DiscountDTO discount = (DiscountDTO) responseEvent.getMessage().getPayload();

        assertThat(discount.getCode(), is("d1"));
    }

    @Test
    public void testUpsertDiscount() throws Exception
    {
        stubFor(put(urlEqualTo("/ws410/rest/discounts/d1")).willReturn(aResponse().withStatus(201)));

        Flow flow = lookupFlowConstruct("upsertDiscount");

        DiscountDTO discountRequest = new DiscountDTO();
        discountRequest.setCode("d1");

        MuleEvent event = FunctionalTestCase.getTestEvent(discountRequest);
        flow.process(event);

        verify(putRequestedFor(urlEqualTo("/ws410/rest/discounts/d1")).withHeader("Content-type",
                equalTo("application/xml")).withHeader("Authorization",
                equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testDeleteDiscount() throws Exception
    {
        stubFor(delete(urlEqualTo("/ws410/rest/discounts/d1")).willReturn(
                aResponse().withStatus(200)));

        Flow flow = lookupFlowConstruct("deleteDiscount");

        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        flow.process(event);

        verify(deleteRequestedFor(urlEqualTo("/ws410/rest/discounts/d1")).withHeader(
                "Authorization", equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testGetCarts() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/carts?carts_size=2&carts_page=0")).willReturn(
                aResponse().withStatus(200).withHeader("Content-type", "application/xml")
                        .withBody(IOUtils.getResourceAsString("xml/carts.xml", this.getClass()))));

        Flow flow = lookupFlowConstruct("getCartsPaged");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(urlEqualTo("/ws410/rest/carts?carts_size=2&carts_page=0"))
                .withHeader("Authorization", equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(List.class)));

        @SuppressWarnings("unchecked")
        List<CartDTO> carts = (List<CartDTO>) responseEvent.getMessage().getPayload();
        assertThat(carts.size(), is(greaterThan(0)));
    }

    @Test
    public void testGetCart() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/carts/00000000")).willReturn(
                aResponse().withStatus(200).withHeader("Content-type", "application/xml")
                        .withBody(IOUtils.getResourceAsString("xml/cart.xml", this.getClass()))));

        Flow flow = lookupFlowConstruct("getCart");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(urlEqualTo("/ws410/rest/carts/00000000")).withHeader(
                "Authorization", equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(CartDTO.class)));

        CartDTO cart = (CartDTO) responseEvent.getMessage().getPayload();

        assertThat(cart.getCode(), is("00000000"));
    }

    @Test
    public void testUpsertCart() throws Exception
    {
        stubFor(put(urlEqualTo("/ws410/rest/carts/00000000")).willReturn(
                aResponse().withStatus(201)));

        Flow flow = lookupFlowConstruct("upsertCart");

        CartDTO cartRequest = new CartDTO();
        cartRequest.setCode("00000000");

        MuleEvent event = FunctionalTestCase.getTestEvent(cartRequest);
        flow.process(event);

        verify(putRequestedFor(urlEqualTo("/ws410/rest/carts/00000000")).withHeader("Content-type",
                equalTo("application/xml")).withHeader("Authorization",
                equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testDeleteCart() throws Exception
    {
        stubFor(delete(urlEqualTo("/ws410/rest/carts/00000000")).willReturn(
                aResponse().withStatus(200)));

        Flow flow = lookupFlowConstruct("deleteCart");

        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        flow.process(event);

        verify(deleteRequestedFor(urlEqualTo("/ws410/rest/carts/00000000")).withHeader(
                "Authorization", equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testGetCartEntries() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/cartentries?cartentries_size=2&cartentries_page=0"))
                .willReturn(
                        aResponse()
                                .withStatus(200)
                                .withHeader("Content-type", "application/xml")
                                .withBody(
                                        IOUtils.getResourceAsString("xml/cartentries.xml",
                                                this.getClass()))));

        Flow flow = lookupFlowConstruct("getCartEntriesPaged");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(
                urlEqualTo("/ws410/rest/cartentries?cartentries_size=2&cartentries_page=0"))
                .withHeader("Authorization", equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(List.class)));

        @SuppressWarnings("unchecked")
        List<CartEntryDTO> cartentries = (List<CartEntryDTO>) responseEvent.getMessage()
                .getPayload();
        assertThat(cartentries.size(), is(greaterThan(0)));
    }

    @Test
    public void testGetCartEntry() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/cartentries/8796093055020"))
                .willReturn(
                        aResponse()
                                .withStatus(200)
                                .withHeader("Content-type", "application/xml")
                                .withBody(
                                        IOUtils.getResourceAsString("xml/cartentry.xml",
                                                this.getClass()))));

        Flow flow = lookupFlowConstruct("getCartEntry");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(urlEqualTo("/ws410/rest/cartentries/8796093055020")).withHeader(
                "Authorization", equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(CartEntryDTO.class)));

        CartEntryDTO discount = (CartEntryDTO) responseEvent.getMessage().getPayload();

        assertThat(discount.getPk(), is(8796093055020l));
    }

    @Test
    public void testUpsertCartEntry() throws Exception
    {
        stubFor(put(urlEqualTo("/ws410/rest/cartentries/8796093055020")).willReturn(
                aResponse().withStatus(201)));

        Flow flow = lookupFlowConstruct("upsertCartEntry");

        CartEntryDTO cartEntryRequest = new CartEntryDTO();
        cartEntryRequest.setPk(8796093055020l);

        MuleEvent event = FunctionalTestCase.getTestEvent(cartEntryRequest);
        flow.process(event);

        verify(putRequestedFor(urlEqualTo("/ws410/rest/cartentries/8796093055020")).withHeader(
                "Content-type", equalTo("application/xml")).withHeader("Authorization",
                equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testDeleteCartEntry() throws Exception
    {
        stubFor(delete(urlEqualTo("/ws410/rest/cartentries/8796093055020")).willReturn(
                aResponse().withStatus(200)));

        Flow flow = lookupFlowConstruct("deleteCartEntry");

        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        flow.process(event);

        verify(deleteRequestedFor(urlEqualTo("/ws410/rest/cartentries/8796093055020")).withHeader(
                "Authorization", equalTo(createAuthHeader("admin", "nimda"))));
    }
    

    @Test
    public void testGetPaymentModes() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/paymentmodes?paymentmodes_size=2&paymentmodes_page=0"))
                .willReturn(
                        aResponse()
                                .withStatus(200)
                                .withHeader("Content-type", "application/xml")
                                .withBody(
                                        IOUtils.getResourceAsString("xml/paymentmodes.xml",
                                                this.getClass()))));

        Flow flow = lookupFlowConstruct("getPaymentModesPaged");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(
                urlEqualTo("/ws410/rest/paymentmodes?paymentmodes_size=2&paymentmodes_page=0")).withHeader(
                "Authorization", equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(List.class)));

        @SuppressWarnings("unchecked")
        List<PaymentModeDTO> paymentModes = (List<PaymentModeDTO>) responseEvent.getMessage().getPayload();
        assertThat(paymentModes.size(), is(greaterThan(0)));
    }

    @Test
    public void testGetPaymentMode() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/paymentmodes/p1"))
                .willReturn(
                        aResponse()
                                .withStatus(200)
                                .withHeader("Content-type", "application/xml")
                                .withBody(
                                        IOUtils.getResourceAsString("xml/paymentMode.xml",
                                                this.getClass()))));

        Flow flow = lookupFlowConstruct("getPaymentMode");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(urlEqualTo("/ws410/rest/paymentmodes/p1")).withHeader("Authorization",
                equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(PaymentModeDTO.class)));

        PaymentModeDTO paymentMode = (PaymentModeDTO) responseEvent.getMessage().getPayload();

        assertThat(paymentMode.getCode(), is("p1"));
    }

    @Test
    public void testUpsertPaymentMode() throws Exception
    {
        stubFor(put(urlEqualTo("/ws410/rest/paymentmodes/p1")).willReturn(aResponse().withStatus(201)));

        Flow flow = lookupFlowConstruct("upsertPaymentMode");

        PaymentModeDTO paymentModeRequest = new PaymentModeDTO();
        paymentModeRequest.setCode("p1");

        MuleEvent event = FunctionalTestCase.getTestEvent(paymentModeRequest);
        flow.process(event);

        verify(putRequestedFor(urlEqualTo("/ws410/rest/paymentmodes/p1")).withHeader("Content-type",
                equalTo("application/xml")).withHeader("Authorization",
                equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testDeletePaymentMode() throws Exception
    {
        stubFor(delete(urlEqualTo("/ws410/rest/paymentmodes/p1")).willReturn(
                aResponse().withStatus(200)));

        Flow flow = lookupFlowConstruct("deletePaymentMode");

        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        flow.process(event);

        verify(deleteRequestedFor(urlEqualTo("/ws410/rest/paymentmodes/p1")).withHeader(
                "Authorization", equalTo(createAuthHeader("admin", "nimda"))));
    }


    @Test
    public void testGetCountries() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/countries?countries_size=10&countries_page=0"))
                .willReturn(
                        aResponse()
                                .withStatus(200)
                                .withHeader("Content-type", "application/xml")
                                .withBody(
                                        IOUtils.getResourceAsString("xml/countries.xml",
                                                this.getClass()))));

        Flow flow = lookupFlowConstruct("getCountriesPaged");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(
                urlEqualTo("/ws410/rest/countries?countries_size=10&countries_page=0")).withHeader(
                "Authorization", equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(List.class)));

        @SuppressWarnings("unchecked")
        List<CountryDTO> countries = (List<CountryDTO>) responseEvent.getMessage().getPayload();
        assertThat(countries.size(), is(greaterThan(0)));
    }

    @Test
    public void testGetCountry() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/countries/ZM")).willReturn(
                aResponse().withStatus(200).withHeader("Content-type", "application/xml")
                        .withBody(IOUtils.getResourceAsString("xml/country.xml", this.getClass()))));

        Flow flow = lookupFlowConstruct("getCountry");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(urlEqualTo("/ws410/rest/countries/ZM")).withHeader("Authorization",
                equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(CountryDTO.class)));

        CountryDTO country = (CountryDTO) responseEvent.getMessage().getPayload();

        assertThat(country.getIsocode(), is("ZM"));
    }

    @Test
    public void testUpsertCountry() throws Exception
    {
        stubFor(put(urlEqualTo("/ws410/rest/countries/XX")).willReturn(aResponse().withStatus(201)));

        Flow flow = lookupFlowConstruct("upsertCountry");

        CountryDTO countryRequest = new CountryDTO();
        countryRequest.setIsocode("XX");

        MuleEvent event = FunctionalTestCase.getTestEvent(countryRequest);
        flow.process(event);

        verify(putRequestedFor(urlEqualTo("/ws410/rest/countries/XX")).withHeader("Content-type",
                equalTo("application/xml")).withHeader("Authorization",
                equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testDeleteCountry() throws Exception
    {
        stubFor(delete(urlEqualTo("/ws410/rest/countries/XX")).willReturn(
                aResponse().withStatus(200)));

        Flow flow = lookupFlowConstruct("deleteCountry");

        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        flow.process(event);

        verify(deleteRequestedFor(urlEqualTo("/ws410/rest/countries/XX")).withHeader(
                "Authorization", equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testGetRegions() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/regions?regions_size=10&regions_page=0")).willReturn(
                aResponse().withStatus(200).withHeader("Content-type", "application/xml")
                        .withBody(IOUtils.getResourceAsString("xml/regions.xml", this.getClass()))));

        Flow flow = lookupFlowConstruct("getRegionsPaged");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(urlEqualTo("/ws410/rest/regions?regions_size=10&regions_page=0"))
                .withHeader("Authorization", equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(List.class)));

        @SuppressWarnings("unchecked")
        List<RegionDTO> regions = (List<RegionDTO>) responseEvent.getMessage().getPayload();
        assertThat(regions.size(), is(greaterThan(0)));
    }

    @Test
    public void testGetRegion() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/regions/US-AL")).willReturn(
                aResponse().withStatus(200).withHeader("Content-type", "application/xml")
                        .withBody(IOUtils.getResourceAsString("xml/region.xml", this.getClass()))));

        Flow flow = lookupFlowConstruct("getRegion");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(urlEqualTo("/ws410/rest/regions/US-AL")).withHeader("Authorization",
                equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(RegionDTO.class)));

        RegionDTO region = (RegionDTO) responseEvent.getMessage().getPayload();

        assertThat(region.getIsocode(), is("US-AL"));
    }

    @Test
    public void testUpsertRegion() throws Exception
    {
        stubFor(put(urlEqualTo("/ws410/rest/regions/US-AL")).willReturn(aResponse().withStatus(201)));

        Flow flow = lookupFlowConstruct("upsertRegion");

        RegionDTO regionRequest = new RegionDTO();
        regionRequest.setIsocode("US-AL");

        MuleEvent event = FunctionalTestCase.getTestEvent(regionRequest);
        flow.process(event);

        verify(putRequestedFor(urlEqualTo("/ws410/rest/regions/US-AL")).withHeader("Content-type",
                equalTo("application/xml")).withHeader("Authorization",
                equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testDeleteRegion() throws Exception
    {
        stubFor(delete(urlEqualTo("/ws410/rest/regions/US-AL"))
                .willReturn(aResponse().withStatus(200)));

        Flow flow = lookupFlowConstruct("deleteRegion");

        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        flow.process(event);

        verify(deleteRequestedFor(urlEqualTo("/ws410/rest/regions/US-AL")).withHeader("Authorization",
                equalTo(createAuthHeader("admin", "nimda"))));
    }
    
    @Test
    public void testGetLanguages() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/languages?languages_size=2&languages_page=0"))
                .willReturn(
                        aResponse()
                                .withStatus(200)
                                .withHeader("Content-type", "application/xml")
                                .withBody(
                                        IOUtils.getResourceAsString("xml/languages.xml",
                                                this.getClass()))));

        Flow flow = lookupFlowConstruct("getLanguagesPaged");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(
                urlEqualTo("/ws410/rest/languages?languages_size=2&languages_page=0")).withHeader(
                "Authorization", equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(List.class)));

        @SuppressWarnings("unchecked")
        List<LanguageDTO> languages = (List<LanguageDTO>) responseEvent.getMessage().getPayload();
        assertThat(languages.size(), is(greaterThan(0)));
    }

    @Test
    public void testGetLanguage() throws Exception
    {
        stubFor(get(urlEqualTo("/ws410/rest/languages/en")).willReturn(
                aResponse().withStatus(200).withHeader("Content-type", "application/xml")
                        .withBody(IOUtils.getResourceAsString("xml/language.xml", this.getClass()))));

        Flow flow = lookupFlowConstruct("getLanguage");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        verify(getRequestedFor(urlEqualTo("/ws410/rest/languages/en")).withHeader("Authorization",
                equalTo(createAuthHeader("admin", "nimda"))));

        assertThat(responseEvent, not(nullValue()));
        assertThat(responseEvent.getMessage().getPayload(), is(instanceOf(LanguageDTO.class)));

        LanguageDTO language = (LanguageDTO) responseEvent.getMessage().getPayload();

        assertThat(language.getIsocode(), is("en"));
    }

    @Test
    public void testUpsertLanguage() throws Exception
    {
        stubFor(put(urlEqualTo("/ws410/rest/languages/en")).willReturn(aResponse().withStatus(201)));

        Flow flow = lookupFlowConstruct("upsertLanguage");

        LanguageDTO languageRequest = new LanguageDTO();
        languageRequest.setIsocode("en");

        MuleEvent event = FunctionalTestCase.getTestEvent(languageRequest);
        flow.process(event);

        verify(putRequestedFor(urlEqualTo("/ws410/rest/languages/en")).withHeader("Content-type",
                equalTo("application/xml")).withHeader("Authorization",
                equalTo(createAuthHeader("admin", "nimda"))));
    }

    @Test
    public void testDeleteLanguage() throws Exception
    {
        stubFor(delete(urlEqualTo("/ws410/rest/languages/en")).willReturn(
                aResponse().withStatus(200)));

        Flow flow = lookupFlowConstruct("deleteLanguage");

        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        flow.process(event);

        verify(deleteRequestedFor(urlEqualTo("/ws410/rest/languages/en")).withHeader(
                "Authorization", equalTo(createAuthHeader("admin", "nimda"))));
    }

    /**
     * Retrieve a flow by name from the registry
     * 
     * @param name
     *            Name of the flow to retrieve
     */
    protected Flow lookupFlowConstruct(String name)
    {
        return (Flow) FunctionalTestCase.muleContext.getRegistry().lookupFlowConstruct(name);
    }

    private static String createAuthHeader(String apiKey, String password) throws IOException
    {
        String auth = apiKey + ":" + password;
        String encodedAuth = Base64.encodeBytes(auth.getBytes(Charset.forName("US-ASCII")));

        return ("Basic " + new String(encodedAuth));
    }

}
